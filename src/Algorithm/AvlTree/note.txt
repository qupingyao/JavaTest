Avl树四种旋转:
	1):ll旋转，a为添加删除节点后最小不平衡子树
	  	    a(h+2)                     a(h+3)              b(h+2)
	  	   /    \      d子树添加新节点后            /    \     ll旋转                 /    \                       		
	  	 b(h+1) c(h)  ------------> b(h+2) c(h) -------> d(h+1) a(h+1)  
	     /	 \        (h>=0)		/	 \			           	   / \         
	   d(h)  e(h)				 d(h+1) e(h)                 	e(h)  c(h)
	  
	  	    a(h+3)                    a(h+3)               b(h+2/h+3)
	  	   /    \      c子树删除节点后              /    \      ll旋转                /    \                       		
	  	 b(h+2) c(h+1)------------> b(h+2) c(h) -------> d(h+1) a(h+1/h+2)  
	     /	 \        (h>=0)		/	 \			           	   / \         
	   d(h+1) e(h/h+1)			 d(h+1) e(h/h+1)             e(h/h+1) c(h)
	2):lr旋转，a为添加删除节点后最小不平衡子树
	  	    a(h+2)                     a(h+3)                 e(h+2)
	  	   /    \      e子树添加新节点后             /    \     lr旋转                /        \
	  	 b(h+1) c(h)  ------------> b(h+2) c(h) -------> b(h+1)     a(h+1)
	     /   \		  (h>=0)         /  \			      /  \       /  \
	   d(h)  e(h)	               d(h) e(h+1)			d(h) e左子树  e右子树    c(h)
	 
	  	    a(h+3)                     a(h+3)                 e(h+2)
	  	   /    \      c子树删除节点后                /    \     lr旋转               /        \
	  	 b(h+2) c(h+1)------------> b(h+2) c(h) -------> b(h+1)     a(h+1)
	    /   \		  (h>=0)         /  \			      /  \       /  \
	   d(h)  e(h+1)	               d(h) e(h+1)			d(h) e左子树  e右子树    c(h)
	3):rl旋转:a为添加删除节点后最小不平衡子树
	  	  a(h+2)                     a(h+3)                  d(h+2)
	  	 /    \        d子树添加新节点后           /   \     rl旋转                   /       \ 
	   b(h)  c(h+1)   ------------> b(h) c(h+2) -------> a(h+1)    c(h+1)  
	   	      /  \    (h>=0)		      /  \	         /   \      /  \
	       d(h) e(h)			     d(h+1) e(h)       b(h) d左子树 d右子树   e(h)
	  
	  	  a(h+3)                      a(h+3)                 d(h+2)
	  	 /    \        b子树删除节点后               /   \     rl旋转                  /       \ 
	   b(h+1) c(h+2)  ------------> b(h) c(h+2) -------> a(h+1)    c(h+1)  
	          /  \	  (h>=0)		     /  \	         /   \      /  \
	     d(h+1) e(h)			     d(h+1) e(h)       b(h) d左子树 d右子树   e(h)
	4):rr旋转:a为添加删除节点后最小不平衡子树
		  a(h+2)                       a(h+3)                 c(h+2)
	  	 /    \        e子树添加新节点后              /  \     rr旋转                        /      \
	   b(h)  c(h+1)   -------------> b(h) c(h+2)-------> a(h+1)   e(h+1)  
	         /    \	  (h>=0)			  /	 \           /   \
	  	   d(h)  e(h)                  d(h) e(h+1)	    b(h) d(h)
	  
	  	  a(h+3)                       a(h+3)                c(h+2/h+3)
	  	 /    \        b子树删除节点后                  /  \     rr旋转                        /      \
	   b(h+1) c(h+2)  ------------> b(h)  c(h+2)-------> a(h+1/h+2) e(h+1)  
	         /    \	  (h>=0)			  /	 \           /   \
	  	d(h/h+1) e(h+1)             d(h/h+1) e(h+1)		b(h) d(h/h+1)