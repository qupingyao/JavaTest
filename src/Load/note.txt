1.装载:
 	1:通过类的全限定名来获取此类的二进制字节流。
    2:将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。
    3:在java堆中创建一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。
           装载由类装载器(可自定义)完成，不一定要等到某个类第一次主动使用时才去装载，但如果装载有问题只有第一次主动使用时才报错。
	一个类被装载前必须保证其父类已被装载。
	
2.链接:
	1.验证:eg-检查二进制字节流是否符合Class文件格式的规范
		  eg-对字节码描述的信息进行语义分析，如检查是否有父类，父类是否已被装载
		     以上JVM操作逻辑上属于验证，但是时间上可能发生在其他步骤
		     检查常量池中的特殊字符串(类名、字段名、方法名)是否符合格式，检查字节码完整性
		
	2-2:准备
	2-3:解析

3.初始化:
	装载，链接的顺序JVM有灵活性，但是强制规定了初始化的顺序。什么时候触发类初始化？
	1.创建类的实例(new，反射，克隆，反序列化)
	2.调用类的静态方法
	3.使用类的静态变量（非final修饰的）
	4.某些反射方法如(Class.forName("my.xyz.Test"))
	5.当初始化子类时父类必须先被初始化
	6.main()方法所在类
	