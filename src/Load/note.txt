jvm类加载机制(这里类没有特殊说明则代表类和接口，以下顺序为逻辑顺序，各阶段通常相互交叉。其中解析阶段逻辑上可能发生在初始化之后)
1.装载:
 	1:通过类的全限定名来获取此类的二进制字节流。
    2:将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。
    3:在java堆中创建一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。
           装载由类装载器(可自定义，重写类加载器的loadClass()方法即可)完成，不一定要等到某个类需要初始化时才去装载，但如果装载有问题只有第一次主动使用时才报错。
	一个类被装载前必须保证其父类已被装载。
	
2.链接:
	1.验证:
		1):文件格式验证-检查二进制字节流是否符合Class文件格式的规范。
		2):元数据验证-对字节码描述的信息进行语义分析，判断其是否符合java语言规范，如检查是否有父类，父类是否已被装载，父类是否允许继承等。
		3):字节码验证-对字节码的数据流和控制流进行语义分析，如判断方法中的类型转换是否合理。   
		4):符号引用验证-对类自身以外的符号引用(常量池内的符号引用)进行校验。
	2.准备:
		为类变量分配内存并设置默认值。
	3.解析:
		将常量池内的符号引用替换为直接引用。

3.初始化:
	装载，链接的时间JVM实现有灵活性，但是强制规定了类初始化的顺序。什么时候触发类初始化？
	1.创建类的实例(new，反射，克隆，反序列化)
	2.调用类的静态方法
	3.使用类的静态变量(非final修饰的，final修饰的在编译期间已被存储到本类的常量池中，和其他类没关系了)
	4.某些反射方法如(Class.forName("my.xyz.Test"))
	5.当初始化子类时父类必须先被初始化(接口初始化时其父接口不需要初始化,接口的实现类初始化时接口也不需要初始化)
	6.main()方法所在类
	