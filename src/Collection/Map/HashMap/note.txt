hashCode()和equals()的区别:
	equals():从业务逻辑上判断两个对象是否相等
	hashCode():仅仅用于某些特殊场合(如map，set)牺牲一定的准确性来快速获取一个对象的唯一标识(不应该出现equals()相等而hashCode()返回不相等的情况)
	              hashCode()相等      hashCode()不相等
	equals()相等                      有                                     无
	equals()不相等                  有                                     有
	对于hashmap而言有:
	              hashCode()相等      hashCode()不相等
	同一个桶                                      有                                     有
	不同的桶                                      无                                     有
	以此推出:
	                                                同一个桶                          不同的桶
	equals()相等                      有                                      无
	equals()不相等                  有                                      有
	
相关资料:
	1.http://www.importnew.com/20386.html
	2.https://www.programcreek.com/2013/09/top-9-questions-for-java-map
	3.http://www.cnblogs.com/skywang12345/p/3310887.html
	4.http://blog.csdn.net/fan2012huan/article/details/51094454

hashmap原理:
	内置一个桶数组，同一桶内的所有键值对(hash冲突)形成链表或者红黑树(红黑树jdk1.8新增)
	capacity:桶数组的大小，2的整数次幂，默认为16，最大为1<<30(int最大为(1<<31)-1)
	threshold:当整个hashmap内键值对个数达到threshold时触发扩容机制(当capacity过小时键值对个数即使不达到threshold也会触发扩容机制)，最大为Integer.MAX_VALUE，
		                  一般记负载因子loadFactor = threshold/capacity 保持在一个恒定的值，默认为0.75(hashmap时间与空间的一个平衡)，可以大于1
	static final int hash(Object key) {
        int h;
        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);/**hashCode异或右移16后的自己**/
    }
	 桶数组的大小设计和hash()方法设计最大程度上减少hash冲突和扩容效率，提高hashmap性能
	1):添加元素逻辑:
	    1:如果桶数组为空，先触发扩容机制
	    2:将添加的key调用hash()方法后的值(下面统称hashkey)用求余的方法确定键值对放在哪个目标桶里(由于桶数组大小是2的整数次幂，只需要简单位运算即可)
	          1):如果目标桶内为空，直接放
	          2):如果目标桶内非空，用key的equals()方法判断目标桶的链表或红黑树内是否有相同的key
	          		1):如果有相同的key就直接覆盖value
	          		2):如果没有相同的key
	          			1):如果目标桶所有键值对形成红黑树，直接往红黑树内放(红黑树内用hashkey作为排序指标，出现hashkey相同的情况时判断双方的key是否都实现了comparable接口，
	          					如果是则用compareTo()比较，否则用双方key的内存地址作为粗略的排序指标，hashmap对排序精度要求不高)
	          			2):如果目标桶所有键值对形成链表，直接放到链表尾部，判断链表长度是否>=8，是则触发目标桶的树化机制
	    3:判断当前hashmap内键值对个数是否达到threshold，达到就触发扩容机制	
	2):删除元素逻辑:
	    1:将删除的key调用hash()方法后的值(下面统称hashkey)用求余的方法确定待删除键值对放在哪个目标桶里(由于桶数组大小是2的整数次幂，只需要简单位运算即可)
	          1):如果目标桶不为空而且目标桶所有键值对形成红黑树，用key的equals()方法判断出是否存在此key(由于红黑树节点中hashkey可能相等，有些情况下寻找某个节点需要同时遍历左子树和右子树，效率低下，因此hashmap的key对象最好实现comparable接口)，
	          		       存在则删除相应的键值对(此时即使红黑树节点数太少也不会触发目标桶的链化机制)
			  2):如果目标桶不为空而且目标桶所有键值对形成链表，用key的equals()方法判断出是否存在此key，存在则删除相应的键值对
	3):扩容机制:
		1:计算扩容后桶数组的capacity和threshold
			  1):如果旧桶数组为空，默认配置capacity=16， threshold=12	
			  2):如果旧桶数组非空，如果oldCapacity已达最大值，capacity=最大值，设置threshold为int最大值
			  3):如果旧桶数组非空，如果oldCapacity未达最大值，capacity=2*oldCapacity，threshold=2*oldThreshold
		2:按照新计算的capacity值新建新的桶数组，如果旧桶数组不为空，将hashmap内所有键值对转移到新的桶数组(对hashmap内每一个键值对，由于扩容倍数为2，设原来所在桶数组下标为a，原桶数组大小为oldCapacity，扩容后所在桶数组下标只可能为a或者a+oldCapacity)
		      这两种情况用(hashkey & oldCapacity) == 0 即可判断区分)
		      对于旧桶数组内每一个桶:
		 	  1):当前桶所有键值对形成链表，依次判断区分链表中每一个节点从而生成两个子链表放入新的桶数组(jdk7中由于子链表生成时使用头插法会使得子链表和原链表比节点顺序反转)
		 	  2):当前桶所有键值对形成红黑树，依次判断区分红黑树中每一个节点从而生成两个子树放入新的桶数组，如果子树节点数不超过6则触发子树所在桶的链化机制
	4):树化机制:
		1):如果桶数组大小小于64，触发扩容机制
		2):如果桶数组大小>=64，用红黑树算法将当前桶的链表转化为红黑树 
	5):链化机制:
		1:直接将当前桶的红黑树转化为链表(hashmap中的红黑树节点有next属性，不需要用树算法遍历)
	6):注意事项:
		1):hashmap的添加方法必须添加新键值对(非覆盖)才会触发modCount改变，删除方法也必须删除键值对才触发，单纯的replace()方法也不会触发
        2):hashmap的构造方法如果不添加键值对是不会new桶数组的，hashtable会  
	
		